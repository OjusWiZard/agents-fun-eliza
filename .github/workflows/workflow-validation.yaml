name: Workflow Validation

on:
  pull_request:
    paths:
      - '.github/workflows/**'
  workflow_dispatch:  # Allow manual triggering

# Define specific permissions (principle of least privilege)
permissions:
  contents: read
  pull-requests: write  # Required to comment on PRs

# Cancel in-progress runs on the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  actionlint:
    name: Validate GitHub Actions Workflows
    runs-on: ubuntu-latest
    timeout-minutes: 10  # Prevent runaway workflows
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          fetch-depth: 1  # Shallow clone for faster checkout
      
      - name: Run actionlint
        uses: reviewdog/action-actionlint@c6ee1eb0a5d47b2af53a203652b5dac0b6c4016e # v1.43.0
        with:
          github_token: ${{ github.token }}
          reporter: github-pr-review
          fail_on_error: true
          filter_mode: nofilter
          level: error

  check-pinned-actions:
    name: Check for Pinned Actions
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          fetch-depth: 1
      
      - name: Check for unpinned actions
        id: check-pins
        run: |
          echo "Checking for unpinned actions in workflow files..."
          
          # Find all workflow files
          WORKFLOW_FILES=$(find .github/workflows -name "*.yml" -o -name "*.yaml")
          
          # Initialize counters
          UNPINNED_COUNT=0
          TOTAL_ACTIONS=0
          
          # Create a report file
          REPORT_FILE="unpinned_actions_report.md"
          { echo "# Unpinned Actions Report"; echo ""; } > "$REPORT_FILE"
          
          for file in $WORKFLOW_FILES; do
            {
              echo "Checking $file"
              echo "```"
            
            # Find lines with 'uses:' but without a SHA pin
            UNPINNED=$(grep -n "uses:" "$file" | grep -v "#" | grep -v "@[a-f0-9]\{40\}")
            
              if [ -n "$UNPINNED" ]; then
                echo "$UNPINNED"
                UNPINNED_COUNT=$((UNPINNED_COUNT + $(echo "$UNPINNED" | wc -l)))
              else
                echo "No unpinned actions found."
              fi
            
            # Count total actions
            TOTAL_IN_FILE=$(grep -c "uses:" "$file" || echo 0)
            TOTAL_ACTIONS=$((TOTAL_ACTIONS + TOTAL_IN_FILE))
              
              echo "```"
              echo ""
            } >> "$REPORT_FILE"
          done
          
          # Summary
          { 
            echo "## Summary"
            echo ""
            echo "- Total actions: $TOTAL_ACTIONS"
            echo "- Unpinned actions: $UNPINNED_COUNT"
          } >> "$REPORT_FILE"
          
          if [ $UNPINNED_COUNT -gt 0 ]; then
            echo "::warning::Found $UNPINNED_COUNT unpinned actions out of $TOTAL_ACTIONS total actions"
            echo "unpinned_found=true" >> "$GITHUB_OUTPUT"
          else
            echo "::notice::All actions are properly pinned with SHA hashes! 🎉"
            echo "unpinned_found=false" >> "$GITHUB_OUTPUT"
          fi
          
          cat "$REPORT_FILE"
      
      - name: Comment on PR
        if: github.event_name == 'pull_request' && steps.check-pins.outputs.unpinned_found == 'true'
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          github-token: ${{ github.token }}
          script: |
            const fs = require('fs');
            const reportContent = fs.readFileSync('unpinned_actions_report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## GitHub Actions Security Check\n\nFound unpinned actions in your workflow files. Please pin all actions with SHA hashes for security.\n\n${reportContent}`
            });

  check-permissions:
    name: Check Workflow Permissions
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          fetch-depth: 1
      
      - name: Check for missing permissions
        id: check-permissions
        run: |
          echo "Checking for missing permissions in workflow files..."
          
          # Find all workflow files
          WORKFLOW_FILES=$(find .github/workflows -name "*.yml" -o -name "*.yaml")
          
          # Initialize counters
          MISSING_PERMS_COUNT=0
          
          # Create a report file
          REPORT_FILE="permissions_report.md"
          { echo "# Workflow Permissions Report"; echo ""; } > "$REPORT_FILE"
          
          for file in $WORKFLOW_FILES; do
            {
              echo "Checking $file"
              
              # Check if the file has permissions defined
              if ! grep -q "permissions:" "$file"; then
                echo "❌ No permissions defined"
                MISSING_PERMS_COUNT=$((MISSING_PERMS_COUNT + 1))
              else
                echo "✅ Permissions defined"
              fi
              
              echo ""
            } >> "$REPORT_FILE"
          done
          
          # Summary
          { 
            echo "## Summary"
            echo ""
            echo "- Total workflow files: $(echo "$WORKFLOW_FILES" | wc -l)"
            echo "- Files missing permissions: $MISSING_PERMS_COUNT"
          } >> "$REPORT_FILE"
          
          if [ $MISSING_PERMS_COUNT -gt 0 ]; then
            echo "::warning::Found $MISSING_PERMS_COUNT workflow files without explicit permissions"
            echo "missing_perms=true" >> "$GITHUB_OUTPUT"
          else
            echo "::notice::All workflow files have explicit permissions defined! 🎉"
            echo "missing_perms=false" >> "$GITHUB_OUTPUT"
          fi
          
          cat "$REPORT_FILE"
      
      - name: Comment on PR
        if: github.event_name == 'pull_request' && steps.check-permissions.outputs.missing_perms == 'true'
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          github-token: ${{ github.token }}
          script: |
            const fs = require('fs');
            const reportContent = fs.readFileSync('permissions_report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## GitHub Actions Permissions Check\n\nFound workflow files without explicit permissions. Please define least-privilege permissions for all workflows.\n\n${reportContent}`
            });

  check-timeouts:
    name: Check for Timeout Limits
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          fetch-depth: 1
      
      - name: Check for missing timeout limits
        id: check-timeouts
        run: |
          echo "Checking for missing timeout limits in workflow files..."
          
          # Find all workflow files
          WORKFLOW_FILES=$(find .github/workflows -name "*.yml" -o -name "*.yaml")
          
          # Initialize counters
          MISSING_TIMEOUTS_COUNT=0
          TOTAL_JOBS=0
          
          # Create a report file
          REPORT_FILE="timeouts_report.md"
          { echo "# Workflow Timeout Limits Report"; echo ""; } > "$REPORT_FILE"
          
          for file in $WORKFLOW_FILES; do
            {
              echo "Checking $file"
              echo "```"
            
            # Count jobs in the file
            JOBS_IN_FILE=$(grep -c "^  [a-zA-Z0-9_-]\+:" "$file" || echo 0)
            TOTAL_JOBS=$((TOTAL_JOBS + JOBS_IN_FILE))
            
            # Check for timeout-minutes in each job
            JOBS_WITH_TIMEOUTS=$(grep -c "timeout-minutes:" "$file" || echo 0)
            MISSING_IN_FILE=$((JOBS_IN_FILE - JOBS_WITH_TIMEOUTS))
            MISSING_TIMEOUTS_COUNT=$((MISSING_TIMEOUTS_COUNT + MISSING_IN_FILE))
            
              echo "Jobs: $JOBS_IN_FILE"
              echo "Jobs with timeouts: $JOBS_WITH_TIMEOUTS"
              echo "Jobs missing timeouts: $MISSING_IN_FILE"
              
              echo "```"
              echo ""
            } >> "$REPORT_FILE"
          done
          
          # Summary
          { 
            echo "## Summary"
            echo ""
            echo "- Total jobs: $TOTAL_JOBS"
            echo "- Jobs missing timeout limits: $MISSING_TIMEOUTS_COUNT"
          } >> "$REPORT_FILE"
          
          if [ $MISSING_TIMEOUTS_COUNT -gt 0 ]; then
            echo "::warning::Found $MISSING_TIMEOUTS_COUNT jobs without timeout limits out of $TOTAL_JOBS total jobs"
            echo "missing_timeouts=true" >> "$GITHUB_OUTPUT"
          else
            echo "::notice::All jobs have timeout limits defined! 🎉"
            echo "missing_timeouts=false" >> "$GITHUB_OUTPUT"
          fi
          
          cat "$REPORT_FILE"
      
      - name: Comment on PR
        if: github.event_name == 'pull_request' && steps.check-timeouts.outputs.missing_timeouts == 'true'
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          github-token: ${{ github.token }}
          script: |
            const fs = require('fs');
            const reportContent = fs.readFileSync('timeouts_report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## GitHub Actions Timeout Check\n\nFound jobs without timeout limits. Please add timeout-minutes to all jobs to prevent runaway workflows.\n\n${reportContent}`
            });